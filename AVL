import java.util.*;

public class AVLTree {
    private class Node {
        private int key, height;
        private Node left, right;

        public Node(int key) {
            this.key = key;
            height = 1;
        }
    }

    private Node root;

    // Public methods for AVL tree operations

    public void insert(int key) {
        root = insertNode(root, key);
    }

    public void delete(int key) {
        root = deleteNode(root, key);
    }

    public void displayInOrder() {
        inOrderTraversal(root);
        System.out.println();
    }

    // Private helper methods

    private Node insertNode(Node node, int key) {
        if (node == null)
            return new Node(key);

        if (key < node.key)
            node.left = insertNode(node.left, key);
        else if (key > node.key)
            node.right = insertNode(node.right, key);
        else
            return node;

        node.height = 1 + Math.max(height(node.left), height(node.right));

        int balance = getBalance(node);

        if (balance > 1 && key < node.left.key)
            return rightRotate(node);
        if (balance < -1 && key > node.right.key)
            return leftRotate(node);
        if (balance > 1 && key > node.left.key) {
            node.left = leftRotate(node.left);
            return rightRotate(node);
        }
        if (balance < -1 && key < node.right.key) {
            node.right = rightRotate(node.right);
            return leftRotate(node);
        }

        return node;
    }

    private Node deleteNode(Node root, int key) {
        // Implementation of deleteNode method
        return null;
    }

    private void inOrderTraversal(Node node) {
        if (node != null) {
            inOrderTraversal(node.left);
            System.out.print(node.key + " ");
            inOrderTraversal(node.right);
        }
    }

    private int height(Node node) {
        return node == null ? 0 : node.height;
    }

    private int getBalance(Node node) {
        if (node == null)
            return 0;
        return height(node.left) - height(node.right);
    }

    private Node rightRotate(Node y) {
        // Implementation of rightRotate method
        return null;
    }

    private Node leftRotate(Node x) {
        // Implementation of leftRotate method
        return null;
    }
}

public static void main(String[] args) {
    AVLTree avl = new AVLTree(); // Changed class name to AVLTree
    Scanner scanner = new Scanner(System.in);

    boolean continueExecution = true;
    while (continueExecution) {
        System.out.println("Choose an operation:");
        System.out.println("1. Insert");
        System.out.println("2. Delete");
        System.out.println("3. End");

        int choice = getValidChoice(scanner);

        switch (choice) {
            case 1:
                System.out.print("Enter the value to insert: ");
                int item = scanner.nextInt();
                avl.insert(item);
                break;
            case 2:
                System.out.print("Enter the value to delete: ");
                int item2 = scanner.nextInt();
                avl.delete(item2);
                break;
            case 3:
                continueExecution = false;
                break;
            default:
                System.out.println("Invalid choice.");
                break;
        }

        avl.displayInOrder(); // Changed method name to displayInOrder

        System.out.println("\nPreorder traversal: ");
        avl.preOrderTraversal(avl.root); // Changed method name to preOrderTraversal
        System.out.println("\n\nPostorder traversal: ");
        avl.postOrderTraversal(avl.root); // Changed method name to postOrderTraversal
        System.out.println("\n\nInorder traversal: ");
        avl.inOrderTraversal(avl.root); // Changed method name to inOrderTraversal

        System.out.print("\nDo you want to continue? (y/n): ");
        String tryAgain = scanner.next();
        if (!tryAgain.equalsIgnoreCase("y")) {
            continueExecution = false;
        }
    }

    System.out.println("Thank you for using the program.");
    scanner.close();
}
